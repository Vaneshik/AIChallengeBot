from telebot import TeleBot, types
from dotenv import load_dotenv
import os

import neurokit2 as nk
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from inference import my_features, read_signal, clean_signal, predict

load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
signal = None
meta_features = None
bot = TeleBot(bot_token)

HELP_MESSAGE = """
–ö–æ–º–∞–Ω–¥—ã:
/start –∏–ª–∏ /help - –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ü§ì
/uploadECG - –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üìÅ 
/plot - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ üìä
/genFeatures - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ —Å–∏–≥–Ω–∞–ª—É üßê
/predict - –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑ üòé
"""


@bot.message_handler(commands=["start", "help"])
def send_welcome(message: types.Message):
    bot.reply_to(message, HELP_MESSAGE)


@bot.message_handler(commands=["uploadECG"])
def send_welcome(message):
    msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .npy")
    bot.register_next_step_handler(msg, process_ecg_upload)


def process_ecg_upload(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open("new_file.npy", "wb") as new_file:
            new_file.write(downloaded_file)

        message_text = """–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
'<age> <sex> <height> <weight>'

–ì–¥–µ:
* age - –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –≥–æ–¥–∞—Ö;
* sex - –ø–æ–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞, 0 - –º—É–∂—á–∏–Ω–∞ / 1 - –∂–µ–Ω—â–∏–Ω–∞;
* height - —Ä–æ—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Å–º, –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π;
* age - –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –∫–≥, –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π.

–ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ '-'"""

        msg = bot.reply_to(message, message_text)
        bot.register_next_step_handler(msg, process_ecg_meta)
    except Exception as e:
        print(e)
        bot.reply_to(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - @Vaneshik")


def process_ecg_meta(message):
    global signal, meta
    try:
        signal = read_signal(os.path.join(
            os.path.expanduser('~'), 'AIChallengeBot', 'new_file.npy'))[0]
        signal = nk.ecg_clean(signal)
        
        meta = message.text.split()
        assert(len(meta) == 4, "–î–ª–∏–Ω–∞ != 4")
        
        bot.reply_to(
            message, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /plot, /genFeatures –∏ /predict")
    except Exception as e:
        print(e)
        bot.reply_to(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - @Vaneshik")


@bot.message_handler(commands=["plot"])
def send_welcome(message):
    try:
        nk.signal_plot(signal)
        fig = plt.gcf()
        fig.savefig("myfig.png")

        img = open('myfig.png', 'rb')
        bot.send_photo(message.chat.id, img, "–ì—Ä–∞—Ñ–∏–∫ –≠–ö–ì —Å–∏–≥–Ω–∞–ª–∞!üòé",
                       reply_to_message_id=message.message_id)
        img.close()
    except Exception as e:
        print(e)
        bot.reply_to(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - @Vaneshik")


@bot.message_handler(commands=["genFeatures"])
def send_welcome(message):
    try:
        bot.reply_to(message, my_features(signal).__str__())
    except Exception as e:
        print(e)
        bot.reply_to(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - @Vaneshik")


@bot.message_handler(commands=["predict"])
def send_welcome(message):
    try:
        global meta
        signal = read_signal(os.path.join(os.path.expanduser('~'), 'AIChallengeBot', 'new_file.npy'))
        meta_columns = ['age', 'sex', 'height', 'weight', 'record_name']

        dataset = pd.DataFrame({
            'record_name': ['new_file'],
            'signal_0': [clean_signal(signal, 0)],
            'signal_1': [clean_signal(signal, 1)],
            'age': [np.nan if meta[0] == '-' else int(meta[0])],
            'sex': [np.nan if meta[1] == '-' else int(meta[1])],
            'height': [np.nan if meta[2] == '-' else float(meta[2])],
            'weight': [np.nan if meta[3] == '-' else float(meta[3])],
        })
        res = predict(dataset).to_dict()
        
        # for label, checkbox in res.items():
        #     print(label, checkbox[0])
        
        response = ""
        if res['–Ω–æ—Ä–º–∞'][0] == 1:
            response = "–ó–¥–æ—Ä–æ–≤! ‚úÖ"
        else:
            response = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: " \
            + ", ".join([label.capitalize() for label, checkbox in res.items() if checkbox[0] == 1]) \
            + "‚ùå"
        bot.reply_to(message, response)
    except Exception as e:
        print(e)
        bot.reply_to(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - @Vaneshik")


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! ü§¨\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help")

print("Bot started")
bot.infinity_polling()
